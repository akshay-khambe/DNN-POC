<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="secGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="plImageWidth.Text" xml:space="preserve">
    <value>Image Width</value>
  </data>
  <data name="plImageWidth.Help" xml:space="preserve">
    <value>Set article image width (px), it works when "Force Image Width" option is checked.</value>
  </data>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>List Template </value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Select which template is used to display article list</value>
  </data>
  <data name="plShowImageOnly.Text" xml:space="preserve">
    <value>Records With Image Only</value>
  </data>
  <data name="plShowImageOnly.Help" xml:space="preserve">
    <value>Check to only show articles which have image specified</value>
  </data>
  <data name="plShowImage.Text" xml:space="preserve">
    <value>Show Article Image</value>
  </data>
  <data name="plShowImage.Help" xml:space="preserve">
    <value>show article image in list. Note, if this option is checked, module will ignore "show prefix image" option.</value>
  </data>
  <data name="plFeatured.Text" xml:space="preserve">
    <value>Show Featured Articles Only</value>
  </data>
  <data name="plFeatured.Help" xml:space="preserve">
    <value>Check to display articles which are marked as featured.</value>
  </data>
  <data name="plRowCount.Text" xml:space="preserve">
    <value>Rows Per Page</value>
  </data>
  <data name="plRowCount.Help" xml:space="preserve">
    <value>Enter how many rows will display in one page</value>
  </data>
  <data name="plColCount.Text" xml:space="preserve">
    <value>Records Per Row</value>
  </data>
  <data name="plColCount.Help" xml:space="preserve">
    <value>Records Per Row</value>
  </data>
  <data name="plShowTitle.Text" xml:space="preserve">
    <value>Show Title</value>
  </data>
  <data name="plShowTitle.Help" xml:space="preserve">
    <value>Check to show article title</value>
  </data>
  <data name="plSortField.Text" xml:space="preserve">
    <value>Sort By</value>
  </data>
  <data name="plSortField.Help" xml:space="preserve">
    <value>Sort Fields</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Article List Tab Settings</value>
  </data>
  <data name="secImage.Text" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="secContent.Text" xml:space="preserve">
    <value>Display Contents</value>
  </data>
  <data name="plLinkTarget.Text" xml:space="preserve">
    <value>Link Target</value>
  </data>
  <data name="plLinkTarget.Help" xml:space="preserve">
    <value>Set how to open article detail page</value>
  </data>
  <data name="li_LinkTarget_Blank.Text" xml:space="preserve">
    <value>_Blank (New Page)</value>
  </data>
  <data name="li_LinkTarget_Self.Text" xml:space="preserve">
    <value>_Self (Same Page)</value>
  </data>
  <data name="plShowPublishDate.Text" xml:space="preserve">
    <value>Show Publish Date</value>
  </data>
  <data name="plShowFeaturedField.Text" xml:space="preserve">
    <value>Show Featured Status</value>
  </data>
  <data name="plShowViews.Text" xml:space="preserve">
    <value>Show Views</value>
  </data>
  <data name="chkForceImageHeight.Text" xml:space="preserve">
    <value>Force Image height</value>
  </data>
  <data name="chkForceImageWidth.Text" xml:space="preserve">
    <value>Force Image Width</value>
  </data>
  <data name="plImageHeight.Help" xml:space="preserve">
    <value>Set article image height (px), it works when "Force Image Height" option is checked.</value>
  </data>
  <data name="plImageHeight.Text" xml:space="preserve">
    <value>Image Height</value>
  </data>
  <data name="plShowUserName.Help" xml:space="preserve">
    <value>Check to show creator in article list</value>
  </data>
  <data name="plShowUserName.Text" xml:space="preserve">
    <value>Show Creator</value>
  </data>
  <data name="plShowAuthor.Help" xml:space="preserve">
    <value>Check to show article "Author" field in list. Note, if current department disable this field, then module will not display it even this option is checked.</value>
  </data>
  <data name="plShowAuthor.Text" xml:space="preserve">
    <value>Show Author</value>
  </data>
  <data name="plShowSummary.Help" xml:space="preserve">
    <value>Check to show summary in article list. Note, if current department disable this field, then module will not display it even this option is checked.</value>
  </data>
  <data name="plShowSummary.Text" xml:space="preserve">
    <value>Show Summary</value>
  </data>
  <data name="plShowPublishDate.Help" xml:space="preserve">
    <value>Show article publish date</value>
  </data>
  <data name="plShowFeaturedField.Help" xml:space="preserve">
    <value>Show article featured status</value>
  </data>
  <data name="plShowViews.Help" xml:space="preserve">
    <value>Show number of views in list</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="plShowSource.Help" xml:space="preserve">
    <value>Show article source in list. Note, if current department disable this field, then module will not display it even this option is checked.</value>
  </data>
  <data name="plShowSource.Text" xml:space="preserve">
    <value>Show Source</value>
  </data>
  <data name="plRatingImage.Help" xml:space="preserve">
    <value>Choose rating image.</value>
  </data>
  <data name="plRatingImage.Text" xml:space="preserve">
    <value>Rating Image</value>
  </data>
  <data name="plShowRating.Help" xml:space="preserve">
    <value>Show article rating result.</value>
  </data>
  <data name="plShowRating.Text" xml:space="preserve">
    <value>Show Rating</value>
  </data>
  <data name="plDetailTab.Help" xml:space="preserve">
    <value>Select which page to display article detail, that page should have a CrossArticle_Detail sub module instance on it. If you don't specify it, module will use the default detail tab to display.</value>
  </data>
  <data name="plDetailTab.Text" xml:space="preserve">
    <value>CrossArticle_Detail Sub Module Page</value>
  </data>
  <data name="plShowRecommend.Help" xml:space="preserve">
    <value>Show recommend information in list.</value>
  </data>
  <data name="plShowRecommend.Text" xml:space="preserve">
    <value>Show Recommend</value>
  </data>
  <data name="plSummaryLength.Help" xml:space="preserve">
    <value>Enter sumary length while displaying, enter 0 to display full summary.</value>
  </data>
  <data name="plSummaryLength.Text" xml:space="preserve">
    <value>Summary Length</value>
  </data>
  <data name="plTitleLength.Help" xml:space="preserve">
    <value>Enter article title length while displaying, enter 0 to display full title.</value>
  </data>
  <data name="plTitleLength.Text" xml:space="preserve">
    <value>Title Length</value>
  </data>
  <data name="plPrefixImage.Help" xml:space="preserve">
    <value>Prefix image locates under Desktopmodules/CrossArticle/Images/Prefix folder, you can upload your own prefix image under it.</value>
  </data>
  <data name="plPrefixImage.Text" xml:space="preserve">
    <value>Prefix Image</value>
  </data>
  <data name="plShowPrefixImage.Help" xml:space="preserve">
    <value>Check to show prefix image before article title.</value>
  </data>
  <data name="plShowPrefixImage.Text" xml:space="preserve">
    <value>Show Prefix Image</value>
  </data>
  <data name="plDisplayRss.Text" xml:space="preserve">
    <value>Display RSS</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select department which articles belongs.</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="plUDFieldList.Help" xml:space="preserve">
    <value>Choose user defined fields which will be displayed in built in template. Note, it works only when "Use built-in template" option is checked.</value>
  </data>
  <data name="plUDFieldList.Text" xml:space="preserve">
    <value>Display Fields</value>
  </data>
  <data name="plUDField_ImageHeight.Help" xml:space="preserve">
    <value>Control the image height of user defined fields.</value>
  </data>
  <data name="plUDField_ImageHeight.Text" xml:space="preserve">
    <value>"Image" Field Height</value>
  </data>
  <data name="plUDField_ImageWidth.Help" xml:space="preserve">
    <value>Control the image width of user defined fields. </value>
  </data>
  <data name="plUDField_ImageWidth.Text" xml:space="preserve">
    <value>"Image" Field Width</value>
  </data>
  <data name="plUseBuiltInTemplate.Help" xml:space="preserve">
    <value>Use built-in tempate to display user defined fields. Uncheck this option if you want to display user defined fields via your own tempaltes. For more detail about customize template, please see user guide document.</value>
  </data>
  <data name="plUseBuiltInTemplate.Text" xml:space="preserve">
    <value>Use Built-In Template</value>
  </data>
  <data name="secUDField.Text" xml:space="preserve">
    <value>Custom Attributes</value>
  </data>
  <data name="Tip_Category.Text" xml:space="preserve">
    <value>Specifies the categories (up to 8) which will show as tabs, module will display articles which belong to each category as tab content. By default, module will use category name as tab title, you can enter a "Tab Title" instead.&lt;br/&gt;&lt;br/&gt;For example, if you create 3 categories ("Man Clothes", "Woman Clothes", "Kid Clothes") at "CrossArticle_Admin sub module - Admin Control Panel - System Data - Categories", you can select "Tab Category 1" as "Man Clothes", "Tab Category 2" as "Woman Clothes", then module will show two tabs. For tab 1, module will show articles which belong to "Man Clothes" category, for tab 2, module will show articles which belong to "Woman Clothes" category.</value>
  </data>
  <data name="Tip_DetailTab.Text" xml:space="preserve">
    <value>Select which page to display article detail, that page should have a CrossArticle_Detail sub module instance on it. If you don't specify it, module will use the default detail page for selected department (which specified in "CrossArticle_Admin sub module - System Data - Departments") to display.</value>
  </data>
  <data name="Tip_DisplayContent.Text" xml:space="preserve">
    <value>Choose data fields which will be displayed in article list.</value>
  </data>
  <data name="Tip_UdField.Text" xml:space="preserve">
    <value>Custom attributes are created in "CrossArticle_Admin sub module - Admin Control Panel - Configurations - System Data - Attributes". You can use built-in tempate to display these attributes. Uncheck this option if you want to display these fields via your own tempaltes. For more detail about customize template, please see "Cross Article User Guide" document.</value>
  </data>
  <data name="plUDField_CheckBoxList_Enabled.Help" xml:space="preserve">
    <value>If you use check box list (or radion button list) to display custom attributes, they will display as disabled by default to avoid visitor select. However, if they look too dim ,you can check on this option to enable it.</value>
  </data>
  <data name="plUDField_CheckBoxList_Enabled.Text" xml:space="preserve">
    <value>Check Box List Enabled</value>
  </data>
  <data name="plUDField_CheckBoxList_RepeatColumns.Help" xml:space="preserve">
    <value>If you use check box list (or radion button list) to display custom attributes, they will display as 1 column per row by default. You can specify more columns per row to let it looks good.</value>
  </data>
  <data name="plUDField_CheckBoxList_RepeatColumns.Text" xml:space="preserve">
    <value>Check Box List Repeat</value>
  </data>
  <data name="li_PublishDateType_All.Text" xml:space="preserve">
    <value>Show All (ignore article publish date)</value>
  </data>
  <data name="li_PublishDateType_Future.Text" xml:space="preserve">
    <value>Future Articles (publish date &gt; Today)</value>
  </data>
  <data name="li_PublishDateType_Past.Text" xml:space="preserve">
    <value>Past Articles (publish date &lt; Today)</value>
  </data>
  <data name="plPublishDateType.Help" xml:space="preserve">
    <value>Choose article publish date limitation</value>
  </data>
  <data name="plPublishDateType.Text" xml:space="preserve">
    <value>Article Publish Date Limitation</value>
  </data>
  <data name="Tip_PublishDateType.Text" xml:space="preserve">
    <value>You can use "Article publish date limitation" option to show articles to some user roles in a certain period, and display these articles to all visitors after these days. This is useful if you want to charge for your articles. For example, if you only allow "Vip" role to read an article in 30 days, then normal users can read it. You can do it as follows:
&lt;br/&gt;&lt;br/&gt;
1. Edit article in "CrossArticle_Admin sub module - My Articles", specify its "Publish Date" as 30 days later. For example, if today is 1/1/2014, then specify its "Publish Date" as 1/31/2014.&lt;br/&gt;
2. Choose "Article publish date limitation" below value as "Future Articles (publish date &gt; Today)" (the "Show All (Ignore article publish date)" value also works).&lt;br/&gt;
3. Click the DNN built-in module action menu "Settings" of current CrossArticle_List sub module instance, select "Permissions" tab, check on "Vip Role" for "View Module" permission. Note, you may need to uncheck "Inherit View permissions from Page" option first in some cases. And click "Update" button to save it.&lt;br/&gt;
4. Put another instance of CrossArticle_List sub module on other page, select "Article publish date limitation" value as "Past Articles (publish date &lt; Today)" for that instance.&lt;br/&gt;
5. This way only users who belong to "Vip" role can access these future published artilces (via current CrossArticle_List module instance). However, other users can access these articles after 30 days (via another CrossArticle_List module instance).&lt;br/&gt;
6. You can then sell "Vip" role via other store module (e.g, our Classified Pro module at http://DnnModule.com), so user needs to pay before become as "Vip" role.
</value>
  </data>
  <data name="plIgnoreSortIndex.Help" xml:space="preserve">
    <value>By default, module will take article sort index property as the first sort factor. For example, if the "Sort Index" property of an article is 1, then it will be always displayed first to pubic. Check on this option to bypass the "Sort Index" property.</value>
  </data>
  <data name="plIgnoreSortIndex.Text" xml:space="preserve">
    <value>Ignore Article "Sort Index" Property</value>
  </data>
  <data name="Tip_ImageSize.Text" xml:space="preserve">
    <value>Specify image width (height) and check on "Force Image Width (Height)" to limit article image size.</value>
  </data>
  <data name="plRepeatColumns.Help" xml:space="preserve">
    <value>If an attribute uses check box list (or radio button list) to display its value, specify check box list (or radio button list) repeat columns here.</value>
  </data>
  <data name="plRepeatColumns.Text" xml:space="preserve">
    <value>Repeat Columns</value>
  </data>
  <data name="Tip_RepeatColumns.Text" xml:space="preserve">
    <value>If an attribute uses check box list (or radio button list) to display its value, specify check box list (or radio button list) repeat columns here. Enter -1 to ignore this setting.</value>
  </data>
  <data name="Tip_Template.Text" xml:space="preserve">
    <value>All sub modules on Cross Article package are template based, you can customize your desired display effect by creating different templates. See "Cross Article user guide.pdf" for more detail.</value>
  </data>
  <data name="plShowAuthorCompany.Help" xml:space="preserve">
    <value>Check to show user company</value>
  </data>
  <data name="plShowAuthorCompany.Text" xml:space="preserve">
    <value>Show user company</value>
  </data>
  <data name="plShowLocation_City.Help" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_City.Text" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_Country.Help" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_Country.Text" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_State.Help" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_State.Text" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_Town.Help" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="plShowLocation_Town.Text" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="Tip_ShowLocation.Text" xml:space="preserve">
    <value>Check to show article (listing) location in list. For example, country = USA, state/province = California, city = Los Angeles, town = Bell. Note, current department must enable "Location" property (can be modified at "CrossArticle_Admin sub module - Admin control panel - System Data - Departments").</value>
  </data>
  <data name="li_ActiveMode_autorotate.Text" xml:space="preserve">
    <value>Auto Rotate</value>
  </data>
  <data name="li_ActiveMode_click.Text" xml:space="preserve">
    <value>Mouse Click</value>
  </data>
  <data name="li_ActiveMode_hover.Text" xml:space="preserve">
    <value>Mouse Hover</value>
  </data>
  <data name="li_HeightStyle_auto.Text" xml:space="preserve">
    <value>Auto: All panels will be set to the height of the tallest panel.</value>
  </data>
  <data name="li_HeightStyle_content.Text" xml:space="preserve">
    <value>Content: Each panel will be only as tall as its content.</value>
  </data>
  <data name="li_HeightStyle_fill.Text" xml:space="preserve">
    <value>Fill: Expand to the available height based on the tabs' parent height.</value>
  </data>
  <data name="plActiveMode.Help" xml:space="preserve">
    <value>Choose the tab switch mode</value>
  </data>
  <data name="plActiveMode.Text" xml:space="preserve">
    <value>Tab Switch</value>
  </data>
  <data name="plCssStyle.Help" xml:space="preserve">
    <value>Choose the css style for the jquery ui tabs</value>
  </data>
  <data name="plCssStyle.Text" xml:space="preserve">
    <value>CSS Style</value>
  </data>
  <data name="plHeightStyle.Help" xml:space="preserve">
    <value>Controls the height of the tabs widget and each panel.</value>
  </data>
  <data name="plHeightStyle.Text" xml:space="preserve">
    <value>Height Style</value>
  </data>
  <data name="plRotateInterval.Help" xml:space="preserve">
    <value>Enter the rotate interval, works when tab switch mode is set as "Auto Rotate".</value>
  </data>
  <data name="plRotateInterval.Text" xml:space="preserve">
    <value>Rotate Interval (second)</value>
  </data>
  <data name="plTabCategory1.Text" xml:space="preserve">
    <value>Tab Category 1</value>
  </data>
  <data name="plTabCategory1Title.Text" xml:space="preserve">
    <value>Tab Title 1</value>
  </data>
  <data name="plTabCategory2.Text" xml:space="preserve">
    <value>Tab Category 2</value>
  </data>
  <data name="plTabCategory2Title.Text" xml:space="preserve">
    <value>Tab Title 2</value>
  </data>
  <data name="plTabCategory3.Text" xml:space="preserve">
    <value>Tab Category 3</value>
  </data>
  <data name="plTabCategory3Title.Text" xml:space="preserve">
    <value>Tab Title 3</value>
  </data>
  <data name="plTabCategory4.Text" xml:space="preserve">
    <value>Tab Category 4</value>
  </data>
  <data name="plTabCategory4Title.Text" xml:space="preserve">
    <value>Tab Title 4</value>
  </data>
  <data name="plTabCategory5.Text" xml:space="preserve">
    <value>Tab Category 5</value>
  </data>
  <data name="plTabCategory5Title.Text" xml:space="preserve">
    <value>Tab Title 5</value>
  </data>
  <data name="plTabCategory6.Text" xml:space="preserve">
    <value>Tab Category 6</value>
  </data>
  <data name="plTabCategory6Title.Text" xml:space="preserve">
    <value>Tab Title 6</value>
  </data>
  <data name="plTabCategory7.Text" xml:space="preserve">
    <value>Tab Category 7</value>
  </data>
  <data name="plTabCategory7Title.Text" xml:space="preserve">
    <value>Tab Title 7</value>
  </data>
  <data name="plTabCategory8.Text" xml:space="preserve">
    <value>Tab Category 8</value>
  </data>
  <data name="plTabCategory8Title.Text" xml:space="preserve">
    <value>Tab Title 8</value>
  </data>
  <data name="secCategory.Text" xml:space="preserve">
    <value>Categories On The Tab</value>
  </data>
  <data name="secJqueryTab.Text" xml:space="preserve">
    <value>Jquery UI Tabs</value>
  </data>
  <data name="Tip_JQueryUI.Text" xml:space="preserve">
    <value>Specify the JQuery UI tab options (CSS, Height Style, Tab Switch, etc.) here. Module provides over 24 CSS packages at DesktopModules\CrossArticle\css\jquery-ui-themes-1.11.4\themes folder, you can extend more. Note, if you put multiple instances of CrossArticle_ListTab sub modules on the same page, then &lt;font color="red"&gt;the CSS Style in the last CrossArticle_ListTab sub module&lt;/font&gt; will take effect (it will overwite others settings).</value>
  </data>
  <data name="Tip_RowAndColumn.Text" xml:space="preserve">
    <value>Enter how many rows (and columns) in each tab. For example, if you enter "Rows Per Tab" as 5, "Items Per Row" as 2, then module will show 5 rows in each tab, and show 2 articles in  each row.</value>
  </data>
  <data name="plStartTab.Help" xml:space="preserve">
    <value>Choose start tab, default value is 0 (the frist tab). Note, if you choose a value which is big than tab count, then module will ignore it. For example, if you only have 3 tabs, and you choose 4 (the 5 tab), then module will ignore it.</value>
  </data>
  <data name="plStartTab.Text" xml:space="preserve">
    <value>Start Tab</value>
  </data>
</root>