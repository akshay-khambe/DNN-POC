<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Tip_ContentLocalize.Text" xml:space="preserve">
    <value>Cross Article supports content localization, here you can specify department properties (name, CrossArticle_List sub module page, CrossArticle_Detail sub module page, extra specifications) for different languages. Select a target language first, modify related data and click "Update" to save.&lt;br/&gt;&lt;br/&gt;For example, if a department name is "Software" in English (en-US), you can enter "软件" as its Chinese name, then when displaying in a "Chinese (zh-CN)" culture page, the department name will be shown as "软件".</value>
  </data>
  <data name="ControlTitle_contentlocalize_type.Text" xml:space="preserve">
    <value>Cross Article Department Localization</value>
  </data>
  <data name="lblSelectTargetLanguage.Text" xml:space="preserve">
    <value>Select Target Language</value>
  </data>
  <data name="DetailPage.Text" xml:space="preserve">
    <value>CrossArticle_Detail sub module page ({0})</value>
  </data>
  <data name="divBasic.Text" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="divSpecification_1.Text" xml:space="preserve">
    <value>Specification 1</value>
  </data>
  <data name="divSpecification_2.Text" xml:space="preserve">
    <value>Specification 2</value>
  </data>
  <data name="divSpecification_3.Text" xml:space="preserve">
    <value>Specification 3</value>
  </data>
  <data name="divSpecification_4.Text" xml:space="preserve">
    <value>Specification 4</value>
  </data>
  <data name="divSpecification_5.Text" xml:space="preserve">
    <value>Specification 5</value>
  </data>
  <data name="FieldDefault.Text" xml:space="preserve">
    <value>Specification Default Value ({0})</value>
  </data>
  <data name="FieldTitle.Text" xml:space="preserve">
    <value>Specification Title ({0})</value>
  </data>
  <data name="ListPage.Text" xml:space="preserve">
    <value>CrossArticle_List sub module page ({0})</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>Name ({0})</value>
  </data>
  <data name="Tip_DetailPage.Text" xml:space="preserve">
    <value>Select when user visit website with current language (current culture code), and click an article which belongs to current department, which page will dispaly article detail. You can configure this page as follows: &lt;br/&gt;1. Create a page (or select a existing), make sure its "Localization - Culture Type" property is current language.&lt;br/&gt;2. Put a CrossArticle_Detail sub module instance on the page.&lt;br/&gt;3. Click "Article detail settings" of CrossArticle_Detail sub module, select its "Department" property to current department.&lt;br/&gt;&lt;br/&gt;Module will try to automatic fill this value when you put CrossArticle_Detail sub module instance on certain page. Note, this setting is vital to integrate with DNN built-in search mechanism. If you can't search articles for current language in DNN built-in search box, please check this setting.</value>
  </data>
  <data name="Tip_ExtendField.Text" xml:space="preserve">
    <value>Specifications are detail description (html based long content) of articles which belong to this department. Module already has a built-in fields - "Detail" for all departments.&lt;br/&gt;&lt;br/&gt;
Besides that, module also supports up to 5 additional specification fields which you can customize. You can enable them and specify their title and default value. If you enable some of them for current department, you can specify their localized content (title, default value) here.</value>
  </data>
  <data name="Tip_ListPage.Text" xml:space="preserve">
    <value>Select when user visit website with current language (current culture code), and search article or click category, which page will dispaly articles which belong to current department.You can configure this page as follows: &lt;br/&gt;1. Create a page (or select a existing), make sure its "Localization - Culture Type" property is current language.&lt;br/&gt;2. Put a CrossArticle_List sub module instance on the page.&lt;br/&gt;3. Click "Article list settings" of CrossArticle_List sub module, select its "Department" property to current department.&lt;br/&gt;&lt;br/&gt;Note, module will try to automatic fill this value when you put CrossArticle_List sub module instance on certain page.</value>
  </data>
</root>