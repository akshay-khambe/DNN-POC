 function loadGoogleMapScript() {

   var mapGlobal = {
     //  libraries: "geometry",
     callback: "ContentBuilderMap",
     key: $("#SkinPath").data("mapapi")
   };
   if (window.google && window.google.maps) {
     ContentBuilderMap();
   } else {
     var script = document.createElement('script');
     script.type = 'text/javascript';
     script.src = 'https://maps.googleapis.com/maps/api/js?callback=' + mapGlobal.callback;
     if (mapGlobal.key) {
       script.src += '&key=' + mapGlobal.key;
     }
     $("head").append(script);
   }

 }



 function map_recenter(map, latlng, offsetx, offsety) {
   var point1 = map.getProjection().fromLatLngToPoint(
     (latlng instanceof google.maps.LatLng) ? latlng : map.getCenter()
   );
   var point2 = new google.maps.Point(
     ((typeof (offsetx) == 'number' ? offsetx : 0) / Math.pow(2, map.getZoom())) || 0,
     ((typeof (offsety) == 'number' ? offsety : 0) / Math.pow(2, map.getZoom())) || 0
   );
   map.panTo(map.getProjection().fromPointToLatLng(new google.maps.Point(
     point1.x - point2.x,
     point1.y + point2.y
   )));
 }

 function definePopupClass() {
   /**
    * A customized popup on the map.
    * @param {!google.maps.LatLng} position
    * @param {!Element} content
    * @constructor
    * @extends {google.maps.OverlayView}
    */
   Popup = function (position, content, marker, e, map,style) {
     this.position = position;
     // content=$(content)[0];
     // console.log(content)
     content[0].classList.add('popup-bubble-content');

     var pixelOffset = document.createElement('div');
     pixelOffset.classList.add('popup-bubble-anchor');
     pixelOffset.appendChild(content[0]);

     this.anchor = document.createElement('div');
     this.anchor.classList.add('popup-tip-anchor');
     this.anchor.appendChild(pixelOffset);

     // Optionally stop clicks, etc., from bubbling up to the map.
     this.stopEventPropagation();

     content.parent().hide();

     // console.log(marker)
     marker.addListener('click', function () {
       content.parent().fadeToggle();
      
       if (content.offset().top + 20 < e.offset().top) {
         map_recenter(map, position, 0, content.offset().top - 20 - e.offset().top)
       }
       if(content.parent().is(":visible")){
        content.parent().parent().siblings(".popup-tip-anchor").children().stop().fadeOut();
        }
     })

     content.find(".close").on("click", function () {
       content.parent().fadeOut();
     })


     if(style){
       if(style["bg"]){
        content.css("background-color",style["bg"])
        content.parent().css("background-color",style["bg"])
       }
       if(style["color"]){
        content.css("color",style["color"]);
        content.find("h1,h2,h3,h4,h5,h6,a").css("color",style["color"]);
       }
       if(style["position"]){
        content.parent().addClass("popup-bubble-"+style["position"])
       }
     }



   };
   // NOTE: google.maps.OverlayView is only defined once the Maps API has
   // loaded. That is why Popup is defined inside initMap().
   Popup.prototype = Object.create(google.maps.OverlayView.prototype);

   /** Called when the popup is added to the map. */
   Popup.prototype.onAdd = function () {
     this.getPanes().floatPane.appendChild(this.anchor);
   };

   /** Called when the popup is removed from the map. */
   Popup.prototype.onRemove = function () {
     if (this.anchor.parentElement) {
       this.anchor.parentElement.removeChild(this.anchor);
     }
   };

   /** Called when the popup needs to draw itself. */
   Popup.prototype.draw = function () {
     var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);
     // Hide the popup when it is far out of view.
     var display =
       Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000 ? 'block' : 'none';

     if (display === 'block') {
       this.anchor.style.left = divPosition.x + 'px';
       this.anchor.style.top = divPosition.y + 'px';
     }
     if (this.anchor.style.display !== display) {
       this.anchor.style.display = display;
     }
   };

   /** Stops clicks/drags from bubbling up to the map. */
   Popup.prototype.stopEventPropagation = function () {
     var anchor = this.anchor;
     anchor.style.cursor = 'auto';

     ['click', 'dblclick', 'contextmenu', 'wheel', 'mousedown', 'touchstart', 'pointerdown']
     .forEach(function (event) {
       anchor.addEventListener(event, function (e) {
         e.stopPropagation();
       });
     });
   };
 }

 function ContentBuilderMap(m) {

   if (window.google && window.google.maps) {

     if (!m) {
       m = $(".builder-gmap");
     } else {
       m = m.find(".builder-gmap");
     }
     m.each(function () {
       var e = $(this);
       var data = e.children(".data");
       var geocoder = new google.maps.Geocoder();

       var icon = data.data("icon") ? data.data("icon").replace("[SkinPath]", $("#SkinPath").data("path")) : false;
       var scrollwheel = data.data("scrollwheel") ? data.data("scrollwheel") : false;
       var zoom = data.data("zoom") ? data.data("zoom") : 12;
       var styles = e.children(".mapstyle").length ? e.children(".mapstyle").html() : false;
       var address = data.data("address") ? data.data("address") : false;
       var html = e.children(".markers").length ? e.children(".markers").html() : false;
       var mapTypeId = data.data("type") ? data.data("type") : "roadmap";
       var markerDialsy = data.data("markerdialsy") ? data.data("markerdialsy") : false;
       var items = e.children(".marker-item").length ? e.children(".marker-item").html() : false;
       var coord = data.data("coord") ? data.data("coord") : false;
      var center ;
     
      function mapsload(){
        var map = new google.maps.Map(e[0], {
          zoom: zoom,
          center: center,
          styles: JSON.parse(styles),
          scrollwheel: scrollwheel,
          mapTypeId: mapTypeId,
          disableDefaultUI: true,
          zoomControl: true
        });

        if (items) {
          items = JSON.parse(items);
          definePopupClass();
          for (i in items) {
            var item = items[i];

            var j = {};
            if (item["coord"]) {
              var coord = item["coord"].split(",");
              j["position"] =new google.maps.LatLng(coord[0],coord[1]);
            } else {
              return;
            }
            j["map"] = map;
            var icon2 = item["markersicon"] ? item["markersicon"].replace("[SkinPath]", $("#SkinPath").data("path")) : false;
            if (icon2) {
              j["icon"] = icon2;
            }
            var marker = new google.maps.Marker(j);
            
            var html2 = item["markers"];
          
            if (html2) {
              var popuphtml = $("<div><div class=\"close\"></div></div>");
              popuphtml.append(html2);
              var style ={};

              if(item["markerscolor"]){
                style["color"] =item["markerscolor"];
              }
              if(item["markersbg"]){
                style["bg"] =item["markersbg"];
              }
              if(item["position"]){
                style["position"] =item["position"];
              }
          var popup = new Popup(j["position"], popuphtml, marker, e, map,style);
              popup.setMap(map);
              if (item["markersshow"]) {
                $(popup.anchor).find(".popup-bubble-anchor").fadeIn()
              }
            }

          }


        } else {
          var j = {};
          j["position"] = center;
          j["map"] = map;
          if (icon) j["icon"] = icon;

         

          var marker = new google.maps.Marker(j);
          definePopupClass();
          if (html) {
            var popuphtml = $("<div><div class=\"close\"></div></div>");
            popuphtml.append(html);
            popup = new Popup(center, popuphtml, marker, e, map,false);
            popup.setMap(map);
            if (markerDialsy) {
              $(popup.anchor).find(".popup-bubble-anchor").fadeIn()
            }
          }


        }


      }

      if (items && !address) {
        address = items[i]["title"];
        coord = items[i]["coord"];
      }

       if(coord){
      //  {lat: 59.327, lng: 18.067}
        coord =coord.split(",");
        center = new google.maps.LatLng(coord[0],coord[1]);
        mapsload();

       }else{
        geocoder.geocode({
          'address': address
        }, function (results, status) {
          if (status === 'OK') {
            center =results[0].geometry.location;
            mapsload();
            // $("popup-bubble-anchor").show();

          } else {
            console.log('Geocode was not successful for the following reason: ' + status);
          }
        })
      
      }
      e.removeClass("loading");
     })

   }

 }

 //window.onload = loadGoogleMapScript;
 if (typeof DNNapplyTypography == "undefined") {
   $(window).on("load", function () {
     setTimeout(function () {
       loadGoogleMapScript();
     }, 2000)
   })

 } else {
   jQuery(document).ready(function () {
     loadGoogleMapScript();
   })
 }