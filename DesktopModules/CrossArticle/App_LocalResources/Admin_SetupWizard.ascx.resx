<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_admin_setupwizard.Text" xml:space="preserve">
    <value>Cross Article - Setup Wizard</value>
  </data>
  <data name="lblFinish.Text" xml:space="preserve">
    <value>Click "Finish" button to save data</value>
  </data>
  <data name="lblGeneralTips.Text" xml:space="preserve">
    <value>Cross Article is an enterprise-class DNN module that enables multi-user to publish news, articles, blogs and everything else, like real estate, cars, job listing, product catalogs, survey, directory listings, documents, etc. It includes 14 sub modules which offer many cool features. This wizard will guide you to create some necessary data (departments and categories), also add some pages and put related sub modules on them, this will save your time. However, if you are familiar with Cross Article, you can cancel this wizard and configure it by yourself.&lt;br/&gt;&lt;br/&gt;Would you like to configure Cross Article in this wizard?</value>
  </data>
  <data name="li_SetupType_Yes.Text" xml:space="preserve">
    <value>Yes, configure Cross Article in this wizard (Recommend for new users)</value>
  </data>
  <data name="lblGeneral.Text" xml:space="preserve">
    <value>Cross Article Setup Wizard</value>
  </data>
  <data name="wsGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="li_SetupType_No.Text" xml:space="preserve">
    <value>No, I am familar with Cross Article, I will configure it by myself. (You can click the "Run Cross Article Setup Wizard" link later).</value>
  </data>
  <data name="hlAddArticle.Text" xml:space="preserve">
    <value>Add Articles</value>
  </data>
  <data name="hlReturn.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="lblSuccess.Text" xml:space="preserve">
    <value>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Congratulation! Now you can click "Add Articles" link below to add your first article, or you can click "Return" link to return to previous page if you want to add articles later.&lt;/p&gt;</value>
  </data>
  <data name="hlAccessAdmin.Text" xml:space="preserve">
    <value>Access Article Admin Page</value>
  </data>
  <data name="lblDepartment.Text" xml:space="preserve">
    <value>Select content department</value>
  </data>
  <data name="lblDepartment1.Text" xml:space="preserve">
    <value>Department 1</value>
  </data>
  <data name="lblDepartment2.Text" xml:space="preserve">
    <value>Department 2</value>
  </data>
  <data name="lblDepartment3.Text" xml:space="preserve">
    <value>Department 3</value>
  </data>
  <data name="lblDepartmentTip.Text" xml:space="preserve">
    <value>Cross Article is mainly designed to publish news, articles, blogs, surveys (votes), press releases and stories. With the support of custom attributes, it also allows you to publish everything else, like real estate, cars, job listing, product catalogs, classified ads, directory listings or anything else you can think of.&lt;br/&gt;&lt;br/&gt;Departments are top-level unit to organize these data. Each department has its own categories / attributes / tags / articles (listings). We have listed some frequently-used departments below, you can select them to publish related content. For example, if you want to publish real estate listings, you can check on "Real Estate" option.</value>
  </data>
  <data name="lblExtraDepartment.Text" xml:space="preserve">
    <value>If you haven't found your desired department from above, you can enter their name below to tell module to create them. For example, if you want to publish movie trailers and book, you can enter "Movie" in "Department 1", and enter "Book" in "Department 2".&lt;br/&gt;&lt;br/&gt;Note, this wizard is just try to simplify the departments creation process for you. You are free to create more departments (and also delete/edit existing departments) later by click "CrossArticle_Admin sub module - Admin Control Panel - System Data - Departments").</value>
  </data>
  <data name="li_Department_Ad.Text" xml:space="preserve">
    <value>Classified Ad</value>
  </data>
  <data name="li_Department_Article.Text" xml:space="preserve">
    <value>News Article</value>
  </data>
  <data name="li_Department_Car.Text" xml:space="preserve">
    <value>Car</value>
  </data>
  <data name="li_Department_Directory.Text" xml:space="preserve">
    <value>Directory Listing</value>
  </data>
  <data name="li_Department_Job.Text" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="li_Department_Product.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="li_Department_RealEstate.Text" xml:space="preserve">
    <value>Real Estate</value>
  </data>
  <data name="plDepartment.Help" xml:space="preserve">
    <value>Choose department to publish related data.</value>
  </data>
  <data name="plDepartment.Text" xml:space="preserve">
    <value>Choose Departments</value>
  </data>
  <data name="wsDepartment.Text" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="error_NoDepartment.Text" xml:space="preserve">
    <value>Please select at least 1 department (or enter at least 1 extra department) at "Department" wizard step.</value>
  </data>
  <data name="lblDepartment4.Text" xml:space="preserve">
    <value>Department 4</value>
  </data>
  <data name="lblDepartment5.Text" xml:space="preserve">
    <value>Department 5</value>
  </data>
  <data name="lblSummary.Text" xml:space="preserve">
    <value>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thanks for using this wizard, Cross Article will do below works after you click "Finish" button:&lt;br/&gt;&lt;br/&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1). Create a "Cross Article" page.&lt;br/&gt;&lt;br/&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2). Create a "Article Admin" sub page, and add "CrossArticle_Admin" sub module on it. "CrossArticle_Admin" sub module is used to &lt;font color="red"&gt;manage all data&lt;/font&gt; in Cross Article. In most cases, you only need 1 instance of "CrossArticle_Admin" sub module per portal. Note, if you already put "CrossArticle_Admin" sub module on another page, then this step will be bypassed.&lt;br/&gt;&lt;br/&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3). Create a few departments according to your selection in this wizard, departments are top-level unit to organize data. For example, if you check on "Article" and "Real Estate" in "Department" wizard step, Cross Article will create 2 departments ("Article" and "Real Estate").&lt;br/&gt;&lt;br/&gt;

  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4). For each department, create a list page and put "CrossArticle_List" sub module on it to show related articles (listings). For example, create a "Article List" page and put "CrossArticle_List" sub module on it to show news articles.&lt;br/&gt;&lt;br/&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(5). For each department, create a detail page and put "CrossArticle_Detail" sub module on it to show related article (listing) detail. For example, create a "Article Detail" page and put "CrossArticle_Detail" sub module on it to show news article detail.&lt;br/&gt;&lt;br/&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(6). Note, this wizard is just try to simplify the departments creation process for you. You are free to create more departments (and also delete/edit existing departments) later by click "CrossArticle_Admin sub module - Admin Control Panel - System Data - Departments").&lt;br/&gt;&lt;br/&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(7). If the DNN built-in "Content Localization" feature is enabled (which allows you to publish multiple languages content in same site), Cross Article will &lt;font color="red"&gt;do above works for each language&lt;/font&gt;, to allow you to publish articles (listings) with multiple languages. For example, if you have 2 languages (English and Chinese) installed, Cross Article will generate 2 "Article Admin" pages (one for English, the other for Chinese) and put 2 CrossArticle_Admin sub instances to them, it will also create 2 copies to list page (for CrossArticle_List sub module) and detail page (for CrossArticle_Detail sub module) too.&lt;/p&gt;</value>
  </data>
</root>