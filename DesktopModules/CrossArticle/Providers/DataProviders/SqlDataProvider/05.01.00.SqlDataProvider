
/******   UserDefinedFunction {databaseOwner}[{objectQualifier}CrossArticle_CsvToInt]     12/15/2009 11:05:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_CsvToInt]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'


/*****************************************************/
Create Function {databaseOwner}[{objectQualifier}CrossArticle_CsvToInt] ( @Array varchar(1000)) 
returns @IntTable table 
	(IntValue int)
AS
begin
	declare @separator char(1)
	set @separator = '',''
	declare @separator_position int 
	declare @array_value varchar(1000) 
	
	set @array = @array + '',''
	
	while patindex(''%,%'' , @array) <> 0 
	begin
	
	  select @separator_position =  patindex(''%,%'' , @array)
	  select @array_value = left(@array, @separator_position - 1)
	
		Insert @IntTable
		Values (Cast(@array_value as int))
	  select @array = stuff(@array, 1, @separator_position, '''')
	end
	return
end

' 
END

GO

/******   Tables    begin ******/

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Article]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Article](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
	[Quote] [bit] NULL,
	[Title] [nvarchar](200)  NULL,
	[Author] [nvarchar](200)  NULL,
	[Source] [nvarchar](200)  NULL,
	[Active] [bit] NULL,
	[Authed] [bit] NULL,
	[Featured] [bit] NULL,
	[Draft] [bit] NULL,
	[Thumbnail] [nvarchar](100)  NULL,
	[Image] [nvarchar](50)  NULL,
	[Summary] [nvarchar](1000)  NULL,
	[LinkUrl] [nvarchar](200)  NULL,
	[Article] [ntext]  NULL,
	[Views] [int] NULL CONSTRAINT [DF_{objectQualifier}CrossArticle_Article_Views]  DEFAULT ((1)),
	[PublishDate] [datetime] NULL,
	[ExpireDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[SubmitDate] [datetime] NULL,
	[AuthedDate] [datetime] NULL,
	[AllowComment] [bit] NULL,
	[AllowRating] [bit] NULL,
	[AllowRecommend] [bit] NULL,
	[RatingRoles] [nvarchar](200)  NULL,
	[CommentRoles] [nvarchar](200)  NULL,
	[RecommendRoles] [nvarchar](200)  NULL,
	[DownloadRoles] [nvarchar](200)  NULL,
	[AutoAuthComment] [bit] NULL,
	[PinOrder] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Article] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NOT NULL,
	[CategoryId] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_ArticleToCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_ArticleToRole] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NOT NULL,
	[TagId] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_ArticleToTag] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Attachment]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Attachment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NULL,
	[FilePath] [nvarchar](250) NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Attachment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Category]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Category](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ParentId] [int] NOT NULL,
	[Name] [nvarchar](80)  NOT NULL,
	[Thumbnail] [nvarchar](100)  NULL,
	[Image] [nvarchar](50)  NULL,
	[Order] [int] NULL,
	[Level] [int] NULL,
	[Description] [nvarchar](1000)  NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Category] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

END
GO

/******   Trigger {databaseOwner}[{objectQualifier}CrossArticle_Category_OnDelete]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_OnDelete]'))
DROP TRIGGER {databaseOwner}[{objectQualifier}CrossArticle_Category_OnDelete]
GO

Create Trigger {databaseOwner}[{objectQualifier}CrossArticle_Category_OnDelete]
On {databaseOwner}[{objectQualifier}CrossArticle_Category]
for delete 
as 
   declare @id int
   select @id=id from deleted del;

   delete  from  {databaseOwner}{objectQualifier}CrossArticle_Category 
   where ParentId=@id

   delete from {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory
   where CategoryId=@id
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Comment]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Comment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[ArticleId] [int] NOT NULL,
	[CreatedUser] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NULL,
	[Comment] [nvarchar](1000) NULL,
	[Mail] [nvarchar](30) NULL,
	[Url] [nvarchar](100) NULL,
	[IsPrivate] [bit] NULL,
	[Authed] [bit] NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Comment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Rating]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Rating](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Rating] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Rating] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Recommend]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Recommend](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Recommend] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Recommend] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossArticle_Tag]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossArticle_Tag](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Tag] [nvarchar](200) NOT NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_Tag] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/******   Table {databaseOwner}[{objectQualifier}CrossPortalSetting]     12/15/2009 11:05:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSetting]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}CrossPortalSetting](
	[PortalID] [int] NOT NULL,
	[SettingName] [nvarchar](300) NOT NULL,
	[SettingValue] [nvarchar](2000) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CrossArticle_PortalSetting] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC,
	[SettingName] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/******   Tables    end ******/

/******   Relationship    begin ******/

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Article_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_Portals]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Article]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Article_Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Article] CHECK CONSTRAINT [FK_{objectQualifier}CrossArticle_Article_Portals]
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_ArticleToRole_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_ArticleToRole_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_ArticleToCategory_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_ArticleToCategory_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Attachment_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Attachment]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Attachment_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Attachment] CHECK CONSTRAINT [FK_{objectQualifier}CrossArticle_Attachment_CrossArticle_Article]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_ArticleToTag_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_ArticleToTag_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Recommend_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Recommend]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Recommend_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Comment_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Comment]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Comment_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Comment] CHECK CONSTRAINT [FK_{objectQualifier}CrossArticle_Comment_CrossArticle_Article]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Rating_CrossArticle_Article]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Rating]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Rating_CrossArticle_Article] FOREIGN KEY([ArticleId])
REFERENCES {databaseOwner}[{objectQualifier}CrossArticle_Article] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Article_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Article]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Article_Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Article] CHECK CONSTRAINT [FK_{objectQualifier}CrossArticle_Article_Portals]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossPortalSetting_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSetting]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossPortalSetting]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossPortalSetting_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Category_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Category]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Category_Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}CrossArticle_Tag_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag]'))
ALTER TABLE {databaseOwner}[{objectQualifier}CrossArticle_Tag]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CrossArticle_Tag_Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE


/******   Relationship    end ******/

/******   StoredProcedure    begin ******/

/******   StoredProcedure {databaseOwner}[{objectQualifier}CrossArticle_Attachment_DeleteByArticle]     12/15/2009 11:05:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_DeleteByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_DeleteByArticle]
	@ArticleId int
AS

delete FROM {databaseOwner}{objectQualifier}CrossArticle_Attachment
WHERE
	[ArticleId]=@ArticleId


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE     PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByUser]
        @PortalId int,
        @UserId int,
        @UnAuthed bit=0,
        @IsPrivate bit=0,
        @PageSize int, 
        @PageIndex int    
AS
 
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
 insert into #PageIndex(RowId)
 SELECT a.[id]
 FROM {databaseOwner}{objectQualifier}CrossArticle_Comment a,{databaseOwner}{objectQualifier}CrossArticle_Article b
 WHERE  (a.PortalId = @PortalId) --PortalId   
      and (a.ArticleId=b.Id) 
      and (b.UserId=@UserId) --UserId
      and (@UnAuthed=0 or a.Authed=0) --UnAuthed
      and (@IsPrivate=0 or a.IsPrivate=1) -- IsPrivate
order by a. Id desc


---Get needs rows
   SELECT
	    a.*,
        b.[Title] as ArticleTitle
    FROM  {databaseOwner}{objectQualifier}CrossArticle_Comment a,{databaseOwner}{objectQualifier}CrossArticle_Article b,#PageIndex c
    where (a.Id=c.RowId)
       and   (a.ArticleId=b.Id)
       and   (c.IndexID> @PageLowerBound)	
       and   (c.IndexID< @PageUpperBound)
    ORDER BY c.IndexID
  
     --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByPortal]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE     PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByPortal]
        @PortalId int,
        @UnAuthed bit=0,
        @IsPrivate bit=0,
        @PageSize int, 
        @PageIndex int    
AS
 
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
 insert into #PageIndex(RowId)
 SELECT a.[id]
 FROM {databaseOwner}{objectQualifier}CrossArticle_Comment a,{databaseOwner}{objectQualifier}CrossArticle_Article b
 WHERE  (a.PortalId = @PortalId) --PortalId   
      and (a.ArticleId=b.Id) 
      and (@UnAuthed=0 or a.Authed=0) --UnAuthed
      and (@IsPrivate=0 or a.IsPrivate=1) -- IsPrivate
order by a. Id desc


---Get needs rows
   SELECT
	    a.*,
        b.[Title] as ArticleTitle
    FROM  {databaseOwner}{objectQualifier}CrossArticle_Comment a,{databaseOwner}{objectQualifier}CrossArticle_Article b,#PageIndex c
    where (a.Id=c.RowId)
       and   (a.ArticleId=b.Id)
       and   (c.IndexID> @PageLowerBound)	
       and   (c.IndexID< @PageUpperBound)
    ORDER BY c.IndexID
  
     --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListByPortals]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListByPortals]
	 @PortalId   int,
     @CategoryId   int,
     @UserId int,
     @UnAuthed bit=0,
     @Featured bit=0,
     @UnActive bit=0,
     @Draft bit=0,
     @Expired bit=0,
     @PageSize int, 
     @PageIndex int
AS
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
   insert into #PageIndex(RowId)
   SELECT
	[id]
   FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
   WHERE  (a.PortalId = @PortalId) --PortalId   
     and (@CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId
)) --CategoryId
     and (@UserId= -1 or a.UserId=@UserId) -- UserId
     and (@UnAuthed=0 or a.Authed=0) --UnAuthed
     and (@Featured =0 or a.Featured = 1)-- featured
     and (@UnActive=0 or a.Active=0) --UnActive
     and (@Draft=0 or a.Draft=1) -- Draft
     and (@Expired=0 or   IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) < CONVERT(CHAR(8), GETDATE(), 112)) -- Expired
     ORDER BY a.PinOrder asc,
	          a.CreatedDate desc

SELECT
     a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
       FROM {databaseOwner}{objectQualifier}CrossArticle_Article a,#PageIndex c
       where c.RowId=a.Id 
       and  c.IndexID> @PageLowerBound	
       and  c.IndexID< @PageUpperBound	
   
       ORDER BY
	c.IndexID
	
	     --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Article
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_ListByArticle]
	@ArticleId int,
     @PageSize int, 
     @PageIndex int,
     @Auth  bit,
     @IsPrivate bit
AS

  Declare @PageLowerBound int
  DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1
-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	CommentId	int
     )
----Insert into temptable
    insert into #PageIndex(CommentId)
    SELECT
	[id]
    FROM {databaseOwner}{objectQualifier}CrossArticle_Comment
    WHERE [ArticleId]=@ArticleId
    and(@auth=1 or authed=1)
    and(@IsPrivate=1 or IsPrivate=0)
    order by [id] desc


---Get needs rows
   SELECT
	b.*,
	c.[Title] as ArticleTitle
    FROM #PageIndex a, {databaseOwner}{objectQualifier}CrossArticle_Comment b,{databaseOwner}{objectQualifier}CrossArticle_Article c
    where b.id=a.CommentId 
    and   b.ArticleId=c.id
    and  a.IndexID> @PageLowerBound	
    and	 a.IndexID< @PageUpperBound	  
    ORDER BY a.IndexID
	
	     --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_Get]
	@Id int
	
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Attachment
WHERE
	[Id] = @Id
	

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Attachment
WHERE
	[Id] = @Id

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_ListByArticle]
	@ArticleId int
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Attachment
WHERE
	[ArticleId]=@ArticleId

' 
END
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListByMonth]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListByMonth]
   @PortalID   int,
   @CurrentUserId int,
   @MonthDate datetime = null,
   @SortField	nvarchar(100),
   @MaxNumber	int,
   @ShowPage	bit,
   @PageSize int, 
   @PageIndex int
AS

If @MonthDate IS NULL SET @MonthDate = GetUTCDate()

if (@ShowPage=0) --if donn''t paging ,direct get record 
BEGIN
    set rowcount @MaxNumber
SELECT
		a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
     and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
    AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.CreatedDate BETWEEN DATEADD(month, DATEDIFF(month, 0, @MonthDate), 0)  AND @MonthDate )--article date
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
    
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC
end 

else--paging
begin
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
   insert into #PageIndex(RowId)
   SELECT
	[id]
   FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
 WHERE (a.PortalId = @PortalID)--PortalId
     and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
   AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.CreatedDate BETWEEN DATEADD(month, DATEDIFF(month, 0, @MonthDate), 0)  AND @MonthDate )--article date
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
    
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC

SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
       FROM {databaseOwner}{objectQualifier}CrossArticle_Article a,#PageIndex c
       where c.RowId=a.Id 
       and  c.IndexID> @PageLowerBound	
       and  c.IndexID< @PageUpperBound	
 
       ORDER BY
	c.IndexID
	   --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

end 





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListByDate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListByDate]
   @PortalID   int,
   @CurrentUserId int,
   @ArticleDate datetime = null,
   @SortField	nvarchar(100),
   @MaxNumber	int,
   @ShowPage	bit,
   @PageSize int, 
   @PageIndex int
AS

If @ArticleDate IS NULL SET @ArticleDate = GetUTCDate()

if (@ShowPage=0) --if donn''t paging ,direct get record 
BEGIN
    set rowcount @MaxNumber
SELECT
		a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
    
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
      and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
     AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.CreatedDate BETWEEN @ArticleDate AND DateAdd( dd, 1, @ArticleDate ) )--article date
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
    
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC
end 

else--paging
begin
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
   insert into #PageIndex(RowId)
   SELECT
	[id]
   FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
  WHERE (a.PortalId = @PortalID)--PortalId
     and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
      AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.CreatedDate BETWEEN @ArticleDate AND DateAdd( dd, 1, @ArticleDate ) )--article date
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
    
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC

SELECT
		a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
       FROM {databaseOwner}{objectQualifier}CrossArticle_Article a,#PageIndex c
       where c.RowId=a.Id 
       and  c.IndexID> @PageLowerBound	
       and  c.IndexID< @PageUpperBound	
 
       ORDER BY
	c.IndexID
	   --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

end 






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_Get]
	@Id int
	
AS
select
 	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE
	[Id] = @Id
	


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListRelatedRows]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



/******   StoredProcedure dbo.[{objectQualifier}CrossArticle_Article_ListRelatedRows]     10/18/2007 01:57:14 ******/
CREATE        PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListRelatedRows]
   @PortalID   int,
   @CurrentUserId   int,
   @ArticleId   int,
   @RecordCount  int
 AS
    set rowcount @RecordCount
  
declare @categoryId int
set @categoryId=(SELECT top 1 CategoryId
from  {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory
where {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.ArticleId=@ArticleId order by {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId desc)

select a.*, 
       ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
    WHERE a.PortalId = @PortalID
    and(a.Authed=1)
    and (a.Active=1)
    and (a.Draft=0)
    and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
    and( a.id <>@ArticleId)
    and ( a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryID=@categoryId))
            )--按照第一个目录分类 
      ORDER BY 	CreatedDate desc 
       






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListByModuleSettings]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListByModuleSettings]
   @PortalID   int,
   @CurrentUserID	int,
   @Categories nvarchar(200),
   @Featured	bit,
   @ShowImageOnly bit,
   @SortField	nvarchar(100),
   @MaxNumber	int,
   @ShowPage	bit,
   @PageSize int, 
   @PageIndex int
AS

if (@ShowPage=0) --if donn''t paging ,direct get record 
BEGIN
    set rowcount @MaxNumber
SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
 WHERE( a.PortalId = @PortalID)--PortalId
     and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
   AND ( @Categories = '''' OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryID IN (SELECT intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories)))
            ))--Categories      
     AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
      AND (@Featured = 0 OR a.Featured = 1)
      and (@ShowImageOnly=0 or ((a.Image is not null) and (a.Image<>'''')))

 ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC
end 

else--paging
begin
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
   insert into #PageIndex(RowId)
   SELECT
	[id]
   FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
  WHERE( a.PortalId = @PortalID)--PortalId
     and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
    AND ( @Categories = '''' OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryID IN (SELECT intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories)))
            ))--Categories      
     AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
      AND (@Featured = 0 OR a.Featured = 1)
      and (@ShowImageOnly=0 or ((a.Image is not null) and (a.Image<>'''')))
    
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	END DESC

SELECT
		a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
       FROM {databaseOwner}{objectQualifier}CrossArticle_Article a,#PageIndex c
       where c.RowId=a.Id 
       and  c.IndexID> @PageLowerBound	
       and  c.IndexID< @PageUpperBound	
 
       ORDER BY
	c.IndexID
	   --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

end 






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListAuthor]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListAuthor]
   @PortalID   int
AS
select distinct
	a.UserId,
    a.Username,
    a.FirstName,
    a.LastName,
    a.DisplayName, 
   ''ArticleCounts''=
       (Select count(c.Id)   from 
        {databaseOwner}{objectQualifier}CrossArticle_Article c,{databaseOwner}{objectQualifier}Users d
        where (c.UserId=d.UserId) 
        and (c.Authed=1) 
        and (c.Active=1) 
        and (c.draft=0))
FROM {databaseOwner}{objectQualifier}Users a, {databaseOwner}{objectQualifier}CrossArticle_Article b
WHERE (b.PortalId = @PortalID)--PortalId
   and(b.UserId=a.UserId)





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListRss]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListRss]
   @PortalID   int,
   @CategoryId int,
   @TagId	int,
   @UserId int,
   @SearchTerm nvarchar(100),
   @ArticleDate datetime = null,
   @DateType nvarchar(10)=''month''
AS

If (@ArticleDate IS NULL) SET @ArticleDate = GetUTCDate()
if	(@DateType=''day'') 
begin 
    SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
     and   (a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 )))--only display view roles=-1
    and ( @CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId )
            )--CategoryId
      and ( @TagId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=@TagId )
            )--TagId
     and (@UserId=-1 or a.UserId=@UserId) -- UserId
     and (@searchTerm='''' or a.Title like ''%''+@searchTerm+''%'') -- Searchterm
     and (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
     and (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.publishDate BETWEEN @ArticleDate and DateAdd( dd, 1, @ArticleDate ) )--article date
      and ( a.Authed = 1) -- Authorized
      and ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft     
      ORDER BY a.PublishDate  desc
end
else 
  if	(@DateType=''month'') 
  begin 
    SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
     and   (a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 )))--only display view roles=-1
     and ( @CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId )
            )--CategoryId
      and ( @TagId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=@TagId )
            )--TagId
     and (@UserId=-1 or a.UserId=@UserId) -- UserId
     and (@searchTerm='''' or a.Title like ''%''+@searchTerm+''%'') -- Searchterm
     and (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
     and (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and(a.publishDate BETWEEN DATEADD(month, DATEDIFF(month, 0, @ArticleDate), 0)  AND @ArticleDate )--article date
      and ( a.Authed = 1) -- Authorized
      and ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft     
      ORDER BY a.PublishDate  desc
   end
 else
    begin 
      SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
    and   (a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 )))--only display view roles=-1
     and ( @CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId )
            )--CategoryId
      and ( @TagId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=@TagId )
            )--TagId
     and (@UserId=-1 or a.UserId=@UserId) -- UserId
     and (@searchTerm='''' or a.Title like ''%''+@searchTerm+''%'') -- Searchterm
     and (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
     and (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
     and ( a.Authed = 1) -- Authorized
      and ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft     
      ORDER BY a.PublishDate  desc
   end
 






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListByParm]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListByParm]
   @PortalID   int,
   @CurrentUserID	int,
   @CategoryId int,
   @TagId	int,
   @UserId int,
   @SearchTerm nvarchar(100),
   @SortField	nvarchar(100),
   @MaxNumber	int,
   @ShowPage	bit,
   @PageSize int, 
   @PageIndex int
AS
if (@ShowPage=0) --if donn''t paging ,direct get record 
BEGIN
    set rowcount @MaxNumber

    SELECT
	a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
    and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
    AND ( @CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId )
            )--CategoryId
      AND ( @TagId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=@TagId )
            )--TagId
     and (@UserId=-1 or a.UserId=@UserId) -- UserId
     and (@searchTerm='''' or a.Title like ''%''+@searchTerm+''%'') -- Searchterm
     AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
       
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	  END DESC 
end 

else--paging
begin
    Declare @PageLowerBound int
    DECLARE @PageUpperBound int
    -- Set the page bounds
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageLowerBound + @PageSize + 1

-- Create a temp table to store the select results
    CREATE TABLE #PageIndex 
    (
	IndexID		int IDENTITY (1, 1) NOT NULL,
	RowId	int
     )

-----------Insert into temp table
   insert into #PageIndex(RowId)
   SELECT
	[id]
   FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
    and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
    AND ( @CategoryId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryId=@CategoryId )
            )--CategoryId
      AND ( @TagId = -1 OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag 
    WHERE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=@TagId )
            )--TagId
     and (@UserId=-1 or a.UserId=@UserId) -- UserId
     and (@searchTerm='''' or a.Title like ''%''+@searchTerm+''%'') -- Searchterm
     AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
      AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		WHEN ''PublishDate'' THEN a.PublishDate 
		WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
        when ''Views'' then a.Views
        ELSE a.CreatedDate 
	  END DESC 

SELECT
		a.*,
    ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
       FROM {databaseOwner}{objectQualifier}CrossArticle_Article a,#PageIndex c
       where c.RowId=a.Id 
       and  c.IndexID> @PageLowerBound	
       and  c.IndexID< @PageUpperBound	
 
       ORDER BY
	c.IndexID
	   --Return the total number of records available 
	SELECT TotalRecords = COUNT(IndexID) FROM #PageIndex

end 





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListFlashImage]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




/******   StoredProcedure dbo.[{objectQualifier}CrossArticle_Article_GetFirstImage]     10/18/2007 01:57:12 ******/

CREATE    PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListFlashImage]
   @PortalID   int,
   @CurrentUserId int,
   @Categories varchar(100),
   @RecordCount	int, 
   @Featured	bit,
   @SortField	varchar(100)
AS
   set rowcount @RecordCount
SELECT
	a.*,
     ''UserName''=
    (select UserName from {databaseOwner}{objectQualifier}Users where {databaseOwner}{objectQualifier}Users.UserId=a.UserId),
    ''RatingTotal''=
    (select sum(Rating) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''RatingVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Rating where {databaseOwner}{objectQualifier}CrossArticle_Rating.ArticleId=a.Id),
    ''Comments''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Comment where {databaseOwner}{objectQualifier}CrossArticle_Comment.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Comment.IsPrivate=0),
     ''UpVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=1),
     ''DownVotes''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_Recommend where {databaseOwner}{objectQualifier}CrossArticle_Recommend.ArticleId=a.Id and {databaseOwner}{objectQualifier}CrossArticle_Recommend.Recommend=-1) 
FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
WHERE (a.PortalId = @PortalID)--PortalId
  and    (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
  AND ( @Categories = '''' OR a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory.CategoryID IN (SELECT intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories)))
            ))--Categories    
     AND ( a.Authed = 1) -- Authorized
      AND ( a.Active = 1)  -- Active
      and (a.Draft=0)--Draft    
      AND (@Featured = 0 OR a.Featured = 1)--Featured
      and ((a.Image is not null) and (a.Image<>''''))
      AND (IsNull(a.PublishDate, 1) <= CONVERT(CHAR(8), GETDATE(), 112))
      AND (IsNull(a.ExpireDate, DateAdd(d, 1, GetDate())) > CONVERT(CHAR(8), GETDATE(), 112))
      ORDER BY a.PinOrder asc,
	   CASE @SortField 
		 WHEN ''PublishDate'' THEN a.PublishDate 
		 WHEN ''LastModifiedDate'' THEN a.LastModifiedDate
         when ''Views'' then a.Views
         ELSE a.CreatedDate 
	   END DESC






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListArticleDaysForMonth]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




/****** Objekt:  Gespeicherte Prozedur {databaseOwner}{objectQualifier}CrossArticle_Article_ListArticleDaysForMonth    Skriptdatum: 01.03.2005 17:23:45 ******/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListArticleDaysForMonth]
(
	@PortalID int,
	@ArticleDate DateTime,
    @CurrentUserId int
)
AS

DECLARE @ArticleMonth int
DECLARE @ArticleYear int
SELECT @ArticleMonth = 	DATEPART(mm, @ArticleDate) 
SELECT @ArticleYear = 	DATEPART(yy, @ArticleDate) 


	SELECT
		a.[ID] as ArticleId,
		a.[Title],
		a.[CreatedDate] as AddedDate,
        DATEPART(dd, a.CreatedDate) as AddedDay,
		DATEPART(mm, a.CreatedDate) as AddedMonth,
		DATEPART(yy, a.CreatedDate) as AddedYear
	FROM   {databaseOwner}{objectQualifier}CrossArticle_Article a
	WHERE (a.[PortalID] = @PortalID )and
          (@CurrentUserId = -2 or a.Id in (
	SELECT DISTINCT ArticleId FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole
	WHERE ({databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId = -1 OR {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole.RoleId IN (SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WHERE UserID = @CurrentUserId))
        ))--UserId
       and ( a.Authed=1) and
          ( a.Active=1) and
          ( a.Draft=0) and
	      (DATEPART(yy, a.CreatedDate) = @ArticleYear) AND 
		  (DATEPART(mm, a.CreatedDate) = @ArticleMonth)
	ORDER BY a.CreatedDate



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_ListByParent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE    PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_ListByParent]
@PortalId int,
@ParentId int
	
AS


   SELECT 	a.*,
            ''ArticleCounts''=
       (Select count(b.ArticleId)   from 
        {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory b,{databaseOwner}{objectQualifier}CrossArticle_Article c 
        where (b.CategoryId=a.Id) 
        and (b.ArticleId=c.Id) 
        and (c.Active=1) 
        and (c.draft=0))

   FROM 	CrossArticle_Category a

   WHERE	(PortalId=@PortalId)
            and	([ParentId] = @ParentId) 
   ORDER BY	[Level] ASC,
			[ParentId] ASC,
			[Order] ASC
			






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_AnnouncementExist]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_AnnouncementExist]
	 @Title   nvarchar(200)
AS
   SELECT TotalRecords=Count(a.Id) 
   From {databaseOwner}{objectQualifier}CrossArticle_Article a
   where (a.Title=@Title)

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateViews]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateViews]
	@Id int
AS
UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET   
	[Views] = Views + 1
WHERE
	[Id] = @Id




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateAuthed]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateAuthed]
	@Id int, 	
	@Authed bit
AS
UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET   
	[Authed] = @Authed
WHERE
	[Id] = @Id



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateActive]
	@Id int, 	
	@Active bit
AS
UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET   
	[Active] = @Active
WHERE
	[Id] = @Id



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateFeatured]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateFeatured]
	@Id int, 	
	@Featured bit
AS
UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET   
	[Featured] = @Featured
WHERE
	[Id] = @Id



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateDraft]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_UpdateDraft]
	@Id int, 	
	@Draft bit
AS
UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET   
	[Draft] = @Draft
WHERE
	[Id] = @Id



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_Get]
	@Id int
	
AS

 SELECT 	a.*,
            ''ArticleCounts''=
       (Select count(b.ArticleId)   from 
        {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory b,{databaseOwner}{objectQualifier}CrossArticle_Article c 
        where (b.CategoryId=a.Id) 
        and (b.ArticleId=c.Id) 
        and (c.Active=1) 
        and (c.draft=0))

   FROM 	CrossArticle_Category a
WHERE
	[Id] = @Id
	

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_ListByPortals]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_ListByPortals]
	@PortalId int
AS

SELECT a.*,
         ''ArticleCounts''=
       (Select count(b.ArticleId)   from 
        {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory b,{databaseOwner}{objectQualifier}CrossArticle_Article c 
        where b.CategoryId=a.Id and b.ArticleId=c.Id and c.Active=1 and c.Authed=1 and c.draft=0)
FROM {databaseOwner}{objectQualifier}CrossArticle_Category a
WHERE
	[PortalId]=@PortalId
  ORDER BY	[Level] ASC,
			[ParentId] ASC,
			[Order] ASC

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_Get]
	@Id int
	
AS

SELECT a.*,
     b.[Title] as ArticleTitle
FROM {databaseOwner}{objectQualifier}CrossArticle_Comment a,{databaseOwner}{objectQualifier}CrossArticle_Article b
WHERE (a.[Id] = @Id)
and   (a.[ArticleId]=b.[Id])
	

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListArticleMonths]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


/****** Objekt:  Gespeicherte Prozedur {databaseOwner}{objectQualifier}CrossArticle_Article_ListArticleMonths    Skriptdatum: 01.03.2005 17:23:45 ******/

Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListArticleMonths]
(
	@PortalID int
)
AS

	SELECT
	     DATEPART(mm, a.CreatedDate) as AddedMonth,
	     DATEPART(yy, a.CreatedDate) as AddedYear
	
	FROM {databaseOwner}{objectQualifier}CrossArticle_Article a
	
	WHERE (a.PortalID = @PortalID )
      and (a.Authed=1) 
      and (a.Active=1)
	  and (a.Draft=0)
	group by DATEPART(m, a.CreatedDate), DATEPART(yy, a.CreatedDate)
	order by AddedYear DESC, AddedMonth DESC


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_ListModuleCategories]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

/******   StoredProcedure dbo.[{objectQualifier}CrossArticle_Category_ListModuleCategories]     10/18/2007 01:57:13 ******/
Create      PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_ListModuleCategories]
   @Categories varchar(400)
AS
SELECT a.*,
        ''ArticleCounts''=
       (Select count(b.ArticleId)   from 
        {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory b,{databaseOwner}{objectQualifier}CrossArticle_Article c 
        where b.CategoryId=a.Id and b.ArticleId=c.Id and c.Active=1 and c.Authed=1 and c.draft=0)
	
FROM {databaseOwner}{objectQualifier}CrossArticle_Category a
WHERE a.ID IN (SELECT intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories))







' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_Add]
	@PortalId int,
	@UserId int,
    @Quote bit,
	@Title nvarchar(200),
	@Author nvarchar(200),
	@Source nvarchar(200),
    @Active bit,
	@Authed bit,
	@Featured bit,
	@Draft bit,
	@Thumbnail nvarchar(100),
	@Image nvarchar(50),
	@Summary nvarchar(1000),
	@LinkUrl nvarchar(200),
	@Article ntext,
	@Views int,
	@PublishDate datetime,
	@ExpireDate datetime,
	@SubmitDate datetime,
	@AuthedDate datetime,
	@AllowComment bit,
	@AllowRating bit,
	@AllowRecommend bit,
	@ViewRoles nvarchar(200),
	@RatingRoles nvarchar(200),
	@CommentRoles nvarchar(200),
	@RecommendRoles nvarchar(200),
    @DownloadRoles nvarchar(200),
	@AutoAuthComment bit,
	@PinOrder int,
    @Categories nvarchar(200),
    @Tags nvarchar(200)
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Article (
	[PortalId],
	[UserId],
	[CreatedDate],
    [Quote],
	[Title],
	[Author],
	[Source],
    [Active],
	[Authed],
	[Featured],
	[Draft],
	[Thumbnail],
	[Image],
	[Summary],
	[LinkUrl],
	[Article],
	[Views],
	[PublishDate],
	[ExpireDate],
	[LastModifiedDate],
	[SubmitDate],
	[AuthedDate],
	[AllowComment],
	[AllowRating],
	[AllowRecommend],
	[RatingRoles],
	[CommentRoles],
	[RecommendRoles],
    [DownloadRoles],
	[AutoAuthComment],
	[PinOrder]
) VALUES (
	@PortalId,
	@UserId,
	GetDate(),
    @Quote,
	@Title,
	@Author,
	@Source,
    @Active,
	@Authed,
	@Featured,
	@Draft,
	@Thumbnail,
	@Image,
	@Summary,
	@LinkUrl,
	@Article,
	@Views,
	@PublishDate,
	@ExpireDate,
	GetDate(),
	@SubmitDate,
	@AuthedDate,
	@AllowComment,
	@AllowRating,
	@AllowRecommend,
	@RatingRoles,
	@CommentRoles,
	@RecommendRoles,
    @DownloadRoles,
	@AutoAuthComment,
	@PinOrder
)

DECLARE @ArticleId INT	
SET @ArticleId = @@IDENTITY

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory SELECT @ArticleId, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories)
INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag SELECT @ArticleId, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Tags)
INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole SELECT @ArticleId, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@ViewRoles)

select @ArticleId





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_Update]
	@Id int, 
	@Categories nvarchar(200),
	@Tags nvarchar(200),
    @Quote bit,
	@Title nvarchar(200), 
	@Author nvarchar(200), 
	@Source nvarchar(200), 
    @Active bit,
	@Authed bit, 
	@Featured bit, 
	@Draft bit, 
	@Thumbnail nvarchar(100), 
	@Image nvarchar(50), 
	@Summary nvarchar(1000), 
	@LinkUrl nvarchar(200), 
	@Article ntext, 
	@PublishDate datetime, 
	@ExpireDate datetime, 
	@SubmitDate datetime, 
	@AuthedDate datetime, 
	@AllowComment bit, 
	@AllowRating bit, 
	@AllowRecommend bit, 
	@ViewRoles nvarchar(200), 
	@RatingRoles nvarchar(200), 
	@CommentRoles nvarchar(200), 
	@RecommendRoles nvarchar(200), 
    @DownloadRoles nvarchar(200),
	@AutoAuthComment bit, 
	@PinOrder int 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Article 
SET
    [Quote]=@Quote,
	[Title] = @Title,
	[Author] = @Author,
	[Source] = @Source,
    [Active]= @Active,
	[Authed] = @Authed,
	[Featured] = @Featured,
	[Draft] = @Draft,
	[Thumbnail] = @Thumbnail,
	[Image] = @Image,
	[Summary] = @Summary,
	[LinkUrl] = @LinkUrl,
	[Article] = @Article,
	[PublishDate] = @PublishDate,
	[ExpireDate] = @ExpireDate,
	[LastModifiedDate] = GetDate(),
	[SubmitDate] = @SubmitDate,
	[AuthedDate] = @AuthedDate,
	[AllowComment] = @AllowComment,
	[AllowRating] = @AllowRating,
	[AllowRecommend] = @AllowRecommend,
	[RatingRoles] = @RatingRoles,
	[CommentRoles] = @CommentRoles,
	[RecommendRoles] = @RecommendRoles,
    [DownloadRoles]= @DownloadRoles,
	[AutoAuthComment] = @AutoAuthComment,
	[PinOrder] = @PinOrder
WHERE
	[Id] = @Id

DELETE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory WHERE ArticleId = @Id
INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory SELECT @Id, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Categories)

DELETE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag WHERE ArticleId = @Id
INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag SELECT @Id, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@Tags)

DELETE {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole WHERE ArticleId = @Id
INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole SELECT @Id, intValue FROM {databaseOwner}{objectQualifier}CrossArticle_csvToInt(@ViewRoles)
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingGetModuleTab]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure dbo.CrossPortalSetting_GetModuleTab     10/18/2007 01:56:59 ******/

CREATE       PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingGetModuleTab]
	@PortalId int,	
	@ModuleDefName nvarchar(300)	
AS

Declare @TabId int


      set @TabId= (select top 1 a.tabid 
      from {databaseOwner}{objectQualifier}tabmodules a,{databaseOwner}{objectQualifier}modules b, {databaseOwner}{objectQualifier}moduledefinitions c,{databaseOwner}{objectQualifier}desktopmodules d
      where d.modulename=@ModuleDefName and
      b.PortalId=@PortalId and
      a.moduleid=b.moduleid and
      b.moduledefid= c.moduledefid and
      c.desktopmoduleid=d.desktopmoduleid)

if(@TabId is  null)
begin
   set @TabId=0
end
select @TabId




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Article_ListAnnouncementByPortal]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Article_ListAnnouncementByPortal]
	 @PortalId   int
AS
   select a.* 
   from {databaseOwner}{objectQualifier}Announcements a, {databaseOwner}{objectQualifier}Modules b
   Where (a.ModuleId=b.ModuleId)
   and   (b.PortalID=@PortalId)


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_Add]
	@ArticleId int,
	@FilePath nvarchar(250)
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Attachment (
	[ArticleId],
	[FilePath]
) VALUES (
	@ArticleId,
	@FilePath
)

select SCOPE_IDENTITY()


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Attachment_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Attachment_Update]
	@Id int, 
	@ArticleId int, 
	@FilePath nvarchar(250)
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Attachment SET
	[ArticleId] = @ArticleId,
	[FilePath] = @FilePath
WHERE
	[Id] = @Id


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToRole_ListByArticle]
	@ArticleId int
AS
SELECT a.*
FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToRole a
WHERE
	[ArticleId]=@ArticleId

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Update]
	@Id int, 
	@ArticleId int, 
	@CategoryId int 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory SET
	[ArticleId] = @ArticleId,
	[CategoryId] = @CategoryId
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Get]
	@Id int
	
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory
WHERE
	[Id] = @Id
	
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_ListByArticle]
	@ArticleId int
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory
WHERE
	[ArticleId]=@ArticleId
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToCategory_Add]
	@ArticleId int,
	@CategoryId int
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToCategory (
	[ArticleId],
	[CategoryId]
) VALUES (
	@ArticleId,
	@CategoryId
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_GetCommentCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_GetCommentCount]
	@ArticleId int
	
AS
Declare @Count int
SELECT @Count=Count(Id)
FROM {databaseOwner}{objectQualifier}CrossArticle_Comment
WHERE
	[ArticleId] = @ArticleId

select @Count

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_UpdateAuthed]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_UpdateAuthed]
	@Id int, 
	@Authed bit 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Comment SET
	[Authed] = @Authed
WHERE
	[Id] = @Id

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_Add]
	@UserId int,
	@PortalId int,
	@ArticleId int,
	@CreatedUser nvarchar(50),
	@CreatedDate datetime,
	@Comment nvarchar(1000),
	@Mail nvarchar(30),
	@Url nvarchar(100),
	@IsPrivate bit,
	@Authed bit
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Comment (
	[UserId],
	[PortalId],
	[ArticleId],
	[CreatedUser],
	[CreatedDate],
	[Comment],
	[Mail],
	[Url],
	[IsPrivate],
	[Authed]
) VALUES (
	@UserId,
	@PortalId,
	@ArticleId,
	@CreatedUser,
	@CreatedDate,
	@Comment,
	@Mail,
	@Url,
	@IsPrivate,
	@Authed
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_Update]
	@Id int, 
	@UserId int, 
	@PortalId int, 
	@ArticleId int, 
	@CreatedUser nvarchar(50), 
	@CreatedDate datetime, 
	@Comment nvarchar(1000), 
	@Mail nvarchar(30), 
	@Url nvarchar(100), 
	@IsPrivate bit, 
	@Authed bit 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Comment SET
	[UserId] = @UserId,
	[PortalId] = @PortalId,
	[ArticleId] = @ArticleId,
	[CreatedUser] = @CreatedUser,
	[CreatedDate] = @CreatedDate,
	[Comment] = @Comment,
	[Mail] = @Mail,
	[Url] = @Url,
	[IsPrivate] = @IsPrivate,
	[Authed] = @Authed
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Comment_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Comment_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Comment
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_UpdateOrder]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

/******   StoredProcedure {databaseOwner}{objectQualifier}CrossArticle_Category_UpdateOrder     10/18/2007 01:57:04 ******/

Create  PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_UpdateOrder]

@Id int,
@Order int

AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Category

SET 
		[Order] = @Order

WHERE 	[id] = @Id






' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Category
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_Add]
	@PortalId int,
	@parentId int,
	@Name nvarchar(80),
	@Thumbnail nvarchar(100),
	@Image nvarchar(50),
	@Order int,
	@Level int,
	@Description nvarchar(1000)
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Category (
	[PortalId],
	[parentId],
	[Name],
	[Thumbnail],
	[Image],
	[Order],
	[Level],
	[Description]
) VALUES (
	@PortalId,
	@parentId,
	@Name,
	@Thumbnail,
	@Image,
	@Order,
	@Level,
	@Description
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_Update]
	@Id int, 
	@PortalId int, 
	@parentId int, 
	@Name nvarchar(80), 
	@Thumbnail nvarchar(100), 
	@Image nvarchar(50), 
	@Order int, 
	@Level int, 
	@Description nvarchar(1000) 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Category SET
	[PortalId] = @PortalId,
	[parentId] = @parentId,
	[Name] = @Name,
	[Thumbnail] = @Thumbnail,
	[Image] = @Image,
	[Order] = @Order,
	[Level] = @Level,
	[Description] = @Description
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Category_UpdateLevel]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure {databaseOwner}{objectQualifier}CrossArticle_Category_UpdateLevel     10/18/2007 01:57:04 ******/

Create  PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Category_UpdateLevel]

@Id int,
@Level int

AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Category

SET 
		[Level] = @Level

WHERE 	[id] = @Id





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_GetRecommendCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_GetRecommendCount]
	@ArticleId int,
    @Recommend int
	
AS
Declare @Count int
SELECT @Count=Count(Id)
FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
WHERE
	[ArticleId] = @ArticleId and
    [Recommend]=@Recommend

select @Count

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_ListByUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_ListByUser]
	@ArticleId int,
    @Userid int
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
WHERE
	([ArticleId]=@ArticleId) 
and ([UserId]=@UserId)

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_Get]
	@Id int
	
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
WHERE
	[Id] = @Id
	
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_List]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_List]
AS

SELECT
	*
FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_ListByArticle]
	@ArticleId int
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
WHERE
	[ArticleId]=@ArticleId
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_Add]
	@ArticleId int,
	@UserId int,
	@Recommend int,
	@CreatedDate datetime
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Recommend (
	[ArticleId],
	[UserId],
	[Recommend],
	[CreatedDate]
) VALUES (
	@ArticleId,
	@UserId,
	@Recommend,
	@CreatedDate
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_Update]
	@Id int, 
	@ArticleId int, 
	@UserId int, 
	@Recommend int, 
	@CreatedDate datetime 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Recommend SET
	[ArticleId] = @ArticleId,
	[UserId] = @UserId,
	[Recommend] = @Recommend,
	[CreatedDate] = @CreatedDate
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Recommend_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Recommend_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Recommend
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Get]
	@Id int
	
AS

SELECT a.*,
       ''Tag''=(Select Tag from {databaseOwner}{objectQualifier}CrossArticle_Tag where {databaseOwner}{objectQualifier}CrossArticle_Tag.Id=a.TagId)
FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag a
WHERE
	[Id] = @Id
	
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_Get]
	@Id int
	
AS

SELECT a.*,
       ''ArticleCounts''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag where {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=a.Id)
FROM {databaseOwner}{objectQualifier}CrossArticle_Tag a
WHERE
	[Id] = @Id
	

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Tag
WHERE
	[Id] = @Id

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag
WHERE
	[TagId] = @Id

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_ListByPortals]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_ListByPortals]
	@PortalId int
AS

SELECT a.*,
       ''ArticleCounts''=
     (select count(Id) from {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag where {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag.TagId=a.Id)
FROM {databaseOwner}{objectQualifier}CrossArticle_Tag  a
WHERE
	[PortalId]=@PortalId
order by CreatedDate desc


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_ListByArticle]
	@ArticleId int
AS

SELECT a.*,
       ''Tag''=(Select Tag from {databaseOwner}{objectQualifier}CrossArticle_Tag where {databaseOwner}{objectQualifier}CrossArticle_Tag.Id=a.TagId)
FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag a
WHERE
	[ArticleId]=@ArticleId
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Add]
	@ArticleId int,
	@TagId int
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag (
	[ArticleId],
	[TagId]
) VALUES (
	@ArticleId,
	@TagId
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Update]
	@Id int, 
	@ArticleId int, 
	@TagId int 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag SET
	[ArticleId] = @ArticleId,
	[TagId] = @TagId
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_ArticleToTag_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_ArticleToTag
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_GetByTag]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_GetByTag]
	@Tag nvarchar(200)
AS
Set rowcount 1

SELECT a.*,
       ''ArticleCounts''=0
FROM {databaseOwner}{objectQualifier}CrossArticle_Tag a
WHERE
	Upper([Tag]) = Upper(@Tag)
	


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_Add]
	@PortalId int,
	@UserId int,
	@Tag nvarchar(200)
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Tag (
	[PortalId],
	[UserId],
	[Tag],
	[CreatedDate]
) VALUES (
	@PortalId,
	@UserId,
	@Tag,
	getdate()
)

select SCOPE_IDENTITY()

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Tag_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Tag_Update]
	@Id int, 
	@PortalId int, 
	@UserId int, 
	@Tag nvarchar(200), 
	@CreatedDate datetime 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Tag SET
	[PortalId] = @PortalId,
	[UserId] = @UserId,
	[Tag] = @Tag,
	[CreatedDate] = @CreatedDate
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_Get]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_Get]
	@Id int
	
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE
	[Id] = @Id
	
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_List]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_List]
AS

SELECT
	*
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_ListByArticle]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_ListByArticle]
	@ArticleId int
AS

SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE
	[ArticleId]=@ArticleId
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_Add]
	@ArticleId int,
	@UserId int,
	@Rating int,
	@CreatedDate datetime
AS

INSERT INTO {databaseOwner}{objectQualifier}CrossArticle_Rating (
	[ArticleId],
	[UserId],
	[Rating],
	[CreatedDate]
) VALUES (
	@ArticleId,
	@UserId,
	@Rating,
	@CreatedDate
)

select SCOPE_IDENTITY()
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_Update]
	@Id int, 
	@ArticleId int, 
	@UserId int, 
	@Rating int, 
	@CreatedDate datetime 
AS

UPDATE {databaseOwner}{objectQualifier}CrossArticle_Rating SET
	[ArticleId] = @ArticleId,
	[UserId] = @UserId,
	[Rating] = @Rating,
	[CreatedDate] = @CreatedDate
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_Delete]
	@Id int
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE
	[Id] = @Id
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_GetRatingTotal]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_GetRatingTotal]
	@ArticleId int
	
AS
Declare @total int
SELECT @total=Sum(Rating)
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE
	[ArticleId] = @ArticleId

select @total

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_GetRatingVotes]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_GetRatingVotes]
	@ArticleId int
	
AS
Declare @Votes int
SELECT @Votes=Count(Id)
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE
	[ArticleId] = @ArticleId

select @Votes

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossArticle_Rating_ListByUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

Create PROCEDURE {databaseOwner}[{objectQualifier}CrossArticle_Rating_ListByUser]
	@ArticleId int,
	@UserId int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}CrossArticle_Rating
WHERE ([ArticleId] = @ArticleId)
   and (UserId=@UserId)
	

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingAdd]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

/****** End Drop Stored Procedure ******/


/****** Begin Create Stored Procedure ******/

/******   StoredProcedure dbo.[{objectQualifier}CrossPortalSetting_Add]     10/18/2007 01:56:57 ******/
CREATE  PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingAdd]
	@PortalID int,
	@SettingName nvarchar(300),
	@SettingValue nvarchar(2000)
AS

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY
Declare @count int

SELECT  @count=count([PortalID])
FROM {databaseOwner}{objectQualifier}CrossPortalSetting
WHERE
	[PortalID] = @PortalID
	AND [SettingName] = @SettingName

if(@count=0)
begin
   INSERT INTO {databaseOwner}{objectQualifier}CrossPortalSetting 
   (
	[PortalID],
	[SettingName],
	[SettingValue]
    ) 
    VALUES 
    (
	@PortalID,
	@SettingName,
	@SettingValue
    )
   select SCOPE_IDENTITY()
end



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure dbo.CrossPortalSetting_List    10/18/2007 01:56:59 ******/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingList]
AS

SELECT
	[PortalID],
	[SettingName],
	[SettingValue]
FROM {databaseOwner}{objectQualifier}CrossPortalSetting




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingUpdate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE  PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingUpdate]
	@PortalID int, 
	@SettingName nvarchar(300), 
	@SettingValue nvarchar(2000) 
AS

UPDATE {databaseOwner}{objectQualifier}CrossPortalSetting SET
	[SettingValue] = @SettingValue
WHERE
	[PortalID] = @PortalID
	AND [SettingName] = @SettingName




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingDelete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure dbo.CrossPortalSetting_Delete     10/18/2007 01:56:57 ******/
CREATE  PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingDelete]
	@PortalID int,
	@SettingName nvarchar(300)
AS

DELETE FROM {databaseOwner}{objectQualifier}CrossPortalSetting
WHERE
	[PortalID] = @PortalID
	AND [SettingName] = @SettingName



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingExist]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

/******   StoredProcedure dbo.CrossPortalSetting_Exist     10/18/2007 01:56:58 ******/




CREATE   PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingExist]
	@PortalID int,
	@SettingName nvarchar(300)
	
AS

SELECT  count([PortalID])
	
FROM {databaseOwner}{objectQualifier}CrossPortalSetting
WHERE
	[PortalID] = @PortalID
	AND [SettingName] = @SettingName
	






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingGet]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure dbo.CrossPortalSetting_Get     10/18/2007 01:56:58 ******/



CREATE  PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingGet]
	@PortalID int,
	@SettingName nvarchar(300)
	
AS

SELECT
	[PortalID],
	[SettingName],
	[SettingValue]
FROM {databaseOwner}{objectQualifier}CrossPortalSetting
WHERE
	[PortalID] = @PortalID
	AND [SettingName] = @SettingName
	





' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CrossPortalSettingGetByPortals]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
/******   StoredProcedure dbo.CrossPortalSetting_GetByPortals     10/18/2007 01:56:59 ******/


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CrossPortalSettingGetByPortals]
	@PortalID int
AS

SELECT
	[PortalID],
	[SettingName],
	[SettingValue]
FROM {databaseOwner}{objectQualifier}CrossPortalSetting
WHERE
	[PortalID]=@PortalID




' 
END
GO
/******   StoredProcedure    end ******/
